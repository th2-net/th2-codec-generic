plugins {
    id 'com.palantir.docker' version '0.25.0' apply false
    id 'application'
    id "org.owasp.dependencycheck" version "8.1.2"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.palantir.docker'
    apply plugin: 'application'

    ext {
        resourceDir = "src/main/resources"
        sharedDir = file("${project.rootDir}/shared")

        baseSailfishVersion           = '3.3'
        sailfishVersion               = "3.3.106"

        dockerCodecImplementationDir = 'codec_implementation'
    }

    ext.excludeSailfish = { rcd ->
        rcd.excludeModule("com.exactpro.sf", "sailfish-core")
        rcd.excludeModule("com.exactpro.sf", "sailfish-common")
        rcd.excludeModule("com.exactpro.sf", "sailfish-rest-api-client")
        rcd.excludeModule("com.exactpro.sf", "service-http")
    }

    repositories {
        maven {
            name 'MavenLocal'
            url sharedDir
        }

        maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            content {
                excludeSailfish(it)
            }
        }
        maven {
            name 'Sonatype_snapshots'
            url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            metadataSources {
                mavenPom()
                artifact()
                ignoreGradleMetadataRedirection()
            }
        }
        maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
            metadataSources {
                mavenPom()
                artifact()
                ignoreGradleMetadataRedirection()
            }
        }

        maven {
            name 'Sonatype_releases'
            url 'https://s01.oss.sonatype.org/content/repositories/releases/'
            content {
                excludeSailfish(it)
            }
        }

        mavenCentral()
        mavenLocal()

        configurations.all {
            resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
            resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        }
    }

    configurations {
        codec
    }

    dependencies {
        implementation("com.exactpro.sf:${sf_service_name}:${sailfishVersion}") {
            exclude module: 'sailfish-core'
            exclude module: 'sailfish-common'
        }
        implementation 'com.exactpro.th2:codec-sailfish:4.1.0-TH2-4891-builders-service-loader+'
    }

    jar {
        manifest {
            attributes(
                    'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                    'Specification-Title': '',
                    'Specification-Vendor': 'Exactpro Systems LLC',
                    'Implementation-Title': project.archivesBaseName,
                    'Implementation-Vendor': 'Exactpro Systems LLC',
                    'Implementation-Vendor-Id': 'com.exactpro',
                    'Implementation-Version': project.version
            )
        }
    }

    applicationName = 'service'

    distTar {
        archiveName "${applicationName}.tar"
        into('service/bin') {
            from resourceDir
        }
    }

    dockerPrepare {
        dependsOn distTar
    }

    docker {
        copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
    }

    application {
        mainClassName = "com.exactpro.th2.codec.MainKt"
    }
}

dependencyCheck {
    formats = ['SARIF', 'JSON', 'HTML']
    failBuildOnCVSS = 5

    analyzers {
        assemblyEnabled = false
        nugetconfEnabled = false
        nodeEnabled = false
    }
}
